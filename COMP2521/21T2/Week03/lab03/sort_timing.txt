
Input	Initial	Number	 AvgTime		    AvgTime
Size	Order	of Runs	 for sortIntList	for sort
10000	random	5	     0.22sec	        0.00sec
10000	sorted	5	     0.00sec            0.00sec
10000	reverse	5	     0.00sec		    0.00sec

20000	random	5	     1.20sec		    0.02sec
20000	sorted	5	     0.00sec		    0.00sec
20000	reverse	5	     0.00sec		    0.00sec

40000	random	5	     6.32sec		    0.04sec
40000	sorted	5	     0.01sec		    0.01sec
40000	reverse	5	     0.00sec	       	0.00sec
...
50000	random	5	    10.41sec	        0.04sec
50000	sorted	5	     0.02sec            0.00sec
50000	reverse	5	     0.01sec		    0.01sec

80000	random	5	    29.10sec		    0.07sec
80000	sorted	5	     0.03sec		    0.02sec
80000	reverse	5	     0.03sec		    0.04sec

100000	random	5	    46.51sec		    0.08sec
100000	sorted	5	     0.03sec		    0.02sec
100000	reverse	5	     0.04sec	       	0.05sec
...



1. The source code:
IntList IntListSortedCopy(IntList l) {
	assert(l != NULL);

	IntList sorted = IntListNew();
	for (struct IntListNode *curr = l->first;
			curr != NULL; curr = curr->next) {
		IntListInsertInOrder(sorted, curr->data);
	}
	return sorted;
}

void IntListInsertInOrder(IntList l, int v) {
	assert(l != NULL);

	struct IntListNode *n = newIntListNode(v);

	// empty list
	if (l->size == 0) {
		l->first = n;
		l->last = n;

	// smallest value
	} else if (v <= l->first->data) {
		n->next = l->first;
		l->first = n;

	// largest value
	} else if (v >= l->last->data) {
		l->last->next = n;
		l->last = n;

	// value somewhere in the middle
	} else {
		struct IntListNode *curr;
		for (curr = l->first; curr != NULL; curr = curr->next) {
			if (v <= curr->next->data) {
				n->next = curr->next;
				curr->next = n;
				break;
			}
		}
	}

	l->size++;
}

2. Pseudocode: 
function IntListInsertInOrder():
    if linked list have no elements:                    | 1
        set linked list                                 | 1
    elif linked list have one elements:                 | 1
        set linked list                                 | 1
    elif linked list have two elements:                 | 1
        set linked list                                 | 1
    else:                                               | 1
        for all in the linked list:                     | n
            if value equal or less than the the value 
               in linked list                           | * 1
                change point                            | * 1
                break                                   | * 1
    return                                              | * 1

function IntListSortedCopy(): 
    list sorted                                             | 1
    for all in the linked list:                             | n
        IntListInsertInOrder()                              
    return                                                  | 1

3. analysis O():
a. IntListInsertInOrder:
best case: O(1)
worst case: O(n)
average case: O(n)

b. IntListSortedCopy:
best case: O(n)
worst case: O(n^2)
average case: O(n^2)








4. analysis:
a. random:
Except the special siuation of the empty linked list and the 
linked list only include one or two elements, the number may 
be larger or smaller because of the instability, so it takes 
a long time to sort, the Big-O Value is  O(n^2);

b . sorted
In this case, as it is arranged in sorted order, the input 
element is larger than all of the element in linked list, and the input 
element is inserted at the ending. Sortind takes little time to complete;

c. reverse
In this case, as it is arranged in reverse order, the input 
element is smaller than all of the element in linked list, and the input 
element is inserted at the beginning, which is equivalent to the large 
O value of the second loop being changed from O(n) to O(1). Sortind
 takes little time to complete;













The appendix(test result)


Input size: 10000, Order: random, Program: ./sortIntList
0.22
0.22
0.24
0.22
0.22

Input size: 10000, Order: random, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 10000, Order: sorted, Program: ./sortIntList
0.00
0.00
0.00
0.00
0.00

Input size: 10000, Order: sorted, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 10000, Order: reverse, Program: ./sortIntList
0.00
0.00
0.00
0.00
0.00

Input size: 10000, Order: reverse, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 20000, Order: random, Program: ./sortIntList
1.22
1.18
1.21
1.22
1.21

Input size: 20000, Order: random, Program: sort -n
0.02
0.02
0.02
0.02
0.02

Input size: 20000, Order: sorted, Program: ./sortIntList
0.00
0.00
0.00
0.00
0.00

Input size: 20000, Order: sorted, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 20000, Order: reverse, Program: ./sortIntList
0.00
0.00
0.00
0.00
0.00

Input size: 20000, Order: reverse, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 40000, Order: random, Program: ./sortIntList
6.36
6.30
6.29
6.31
6.34

Input size: 40000, Order: random, Program: sort -n
0.04
0.04
0.03
0.04
0.04

Input size: 40000, Order: sorted, Program: ./sortIntList
0.02
0.01
0.02
0.01
0.01

Input size: 40000, Order: sorted, Program: sort -n
0.02
0.02
0.01
0.01
0.01

Input size: 40000, Order: reverse, Program: ./sortIntList
0.01
0.00
0.00
0.00
0.00

Input size: 40000, Order: reverse, Program: sort -n
0.00
0.00
0.00
0.00
0.00

Input size: 50000, Order: random, Program: ./sortIntList
10.42
10.36
10.44
10.42
10.43

Input size: 50000, Order: random, Program: sort -n
0.04
0.04
0.05
0.04
0.04

Input size: 50000, Order: sorted, Program: ./sortIntList
0.02
0.02
0.02
0.01
0.02

Input size: 50000, Order: sorted, Program: sort -n
0.00
0.01
0.00
0.01
0.00

Input size: 50000, Order: reverse, Program: ./sortIntList
0.01
0.01
0.01
0.01
0.01

Input size: 50000, Order: reverse, Program: sort -n
0.01
0.01
0.01
0.01
0.01

Input size: 80000, Order: random, Program: ./sortIntList
29.04
29.16
29.10
29.08
29.12

Input size: 80000, Order: random, Program: sort -n
0.07
0.06
0.06
0.07
0.07

Input size: 80000, Order: sorted, Program: ./sortIntList
0.03
0.02
0.04
0.03
0.04

Input size: 80000, Order: sorted, Program: sort -n
0.03
0.02
0.02
0.02
0.03

Input size: 80000, Order: reverse, Program: ./sortIntList
0.04
0.04
0.03
0.03
0.03

Input size: 80000, Order: reverse, Program: sort -n
0.04
0.04
0.03
0.03
0.04

Input size: 100000, Order: random, Program: ./sortIntList
46.72
46.48
46.60
46.50
46.24

Input size: 100000, Order: random, Program: sort -n
0.08
0.07
0.08
0.08
0.08

Input size: 100000, Order: sorted, Program: ./sortIntList
0.03
0.04
0.04
0.03
0.03

Input size: 100000, Order: sorted, Program: sort -n
0.01
0.02
0.04
0.02
0.02

Input size: 100000, Order: reverse, Program: ./sortIntList
0.04
0.05
0.04
0.03
0.05

Input size: 100000, Order: reverse, Program: sort -n
0.05
0.04
0.05
0.05
0.05
