Question 3

(a) Eliminate the left recursion in the grammar.
    1. S -> INT X
    2. S -> ID X
    3. X -> S * X
    4. X -> S + X
    5. X -> ϵ

(b) Do left-factorisation of the grammar produced in (a).
    1. S -> INT X
    2. S -> ID X
    3. X -> S Y
    4. X -> ϵ 
    5. Y -> * X
    6. Y -> + X

(c) Compute the FIRST and FOLLOW sets for every non-terminal in the grammar produced in (b).
    1. For non-terminal S:
        1. FIRST(S) = { INT, ID }
        2. FOLLOW(S) = { *, +, $ }

    2. For non-terminal X:
        1. FIRST(X) = { INT, ID }
        2. FOLLOW(X) = { *, +, $ }
        
    3. For non-terminal Y:
        1. FIRST(Y) = { *, + }
        2. FOLLOW(Y) = { *, +, $ }

(d) Construct an LL(1) parsing table for the grammar produced in (b), based on the FIRST and FOLLOW sets computed in (c).

    Assuming $ to be the EOF symbol 

    -----------------------------------------------------------------
    |   |    INT     |     ID     |      *    |     +    |     $    |   
    -----------------------------------------------------------------
    | S | S -> INT X |  S -> ID X |           |                     |
    -----------------------------------------------------------------
    | X |  X -> S Y  |  X -> S Y  |   X -> ϵ  |  X -> ϵ  |  X -> ϵ  |
    -----------------------------------------------------------------
    | Y |            |            |  Y -> * X | Y -> + X |          |
    -----------------------------------------------------------------

(e) Explain concisely how 4 x + * canbe detected by an LL(1) table-driven parser for the language, by showingthe moves of the parser on this sentence based on the LL(1) parsing
table produced in (d), as shown in Week 9’s Wednesday Lecture:

    ---------------------------------------------------------------------
    |    Stack	    |        Input       | 	        Production          |
    ---------------------------------------------------------------------
    |   $S	        |  INT ID + * $	     |  S -> INT X                  |
    |   $ X INT     |  INT ID + * $      |	pop and go to next token    | 
    |   $ X	        |  ID + * $	         |  X -> S Y                    |
    |   $ Y S       |  ID + * $	         |  S -> ID X                   |
    |   $ Y X ID    |  ID + * $	         |  pop and go to next token    |
    |   $ Y X       |  + * $	         |  X -> ϵ                      |
    |   $ Y	        |  + * $	         |  Y -> + X                    |
    |   $ X +       |  + * $	         |  pop and go to next token    |
    |   $ X	        |  * $	             |  X -> ϵ                      |
    |   $	        |  * $	             |  Error: token not matching   |
    ---------------------------------------------------------------------