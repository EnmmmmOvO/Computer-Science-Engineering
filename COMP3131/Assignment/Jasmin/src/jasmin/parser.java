
//----------------------------------------------------
// The following code was generated by Java(tm) CUP v0.9d
// Fri Apr 11 14:54:26 EDT 1997
//----------------------------------------------------

package jasmin;

import java_cup.runtime.*;
import jas.*;
import java.io.*;
import java.util.Hashtable;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {20, 6},     {0, 2},     {33, 3},     {33, 0},     {8, 4}, 
        {8, 4},     {1, 1},     {47, 0},     {46, 2},     {6, 1}, 
        {6, 0},     {5, 2},     {5, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {37, 3}, 
        {17, 1},     {17, 0},     {18, 2},     {18, 1},     {19, 3}, 
        {15, 1},     {15, 0},     {13, 2},     {13, 1},     {14, 6}, 
        {2, 2},     {2, 0},     {3, 1},     {3, 1},     {3, 1}, 
        {30, 1},     {30, 0},     {28, 2},     {28, 1},     {29, 3}, 
        {29, 2},     {10, 4},     {12, 3},     {35, 2},     {35, 1}, 
        {48, 0},     {34, 3},     {36, 1},     {36, 1},     {36, 1}, 
        {36, 1},     {36, 0},     {21, 2},     {11, 2},     {11, 2}, 
        {11, 2},     {11, 2},     {11, 2},     {11, 2},     {45, 8}, 
        {45, 4},     {22, 2},     {40, 1},     {44, 1},     {7, 7}, 
        {31, 2},     {31, 2},     {31, 2},     {31, 2},     {16, 1}, 
        {16, 1},     {32, 1},     {32, 3},     {32, 2},     {32, 2}, 
        {32, 2},     {32, 3},     {32, 3},     {32, 2},     {9, 2}, 
        {9, 2},     {23, 3},     {24, 1},     {27, 2},     {27, 1}, 
        {26, 4},     {25, 3},     {38, 3},     {39, 2},     {39, 3}, 
        {43, 2},     {43, 1},     {42, 2},     {41, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,-4,11,3,15,-4,-1,0},
    /*1*/{0,162,-1,0},
    /*2*/{39,160,-1,0},
    /*3*/{3,6,15,7,-1,0},
    /*4*/{10,31,-1,0},
    /*5*/{21,-8,22,-8,23,-8,24,-8,25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,39,-8,-1,0},
    /*6*/{21,-8,22,-8,23,-8,24,-8,25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,39,-8,-1,0},
    /*7*/{39,26,-1,0},
    /*8*/{21,13,22,23,23,12,24,20,25,15,26,17,27,10,28,18,29,16,30,14,31,11,39,-11,-1,0},
    /*9*/{21,-14,22,-14,23,-14,24,-14,25,-14,26,-14,27,-14,28,-14,29,-14,30,-14,31,-14,39,-14,-1,0},
    /*10*/{21,-20,22,-20,23,-20,24,-20,25,-20,26,-20,27,-20,28,-20,29,-20,30,-20,31,-20,39,-20,-1,0},
    /*11*/{21,-23,22,-23,23,-23,24,-23,25,-23,26,-23,27,-23,28,-23,29,-23,30,-23,31,-23,39,-23,-1,0},
    /*12*/{21,-24,22,-24,23,-24,24,-24,25,-24,26,-24,27,-24,28,-24,29,-24,30,-24,31,-24,39,-24,-1,0},
    /*13*/{21,-21,22,-21,23,-21,24,-21,25,-21,26,-21,27,-21,28,-21,29,-21,30,-21,31,-21,39,-21,-1,0},
    /*14*/{21,-15,22,-15,23,-15,24,-15,25,-15,26,-15,27,-15,28,-15,29,-15,30,-15,31,-15,39,-15,-1,0},
    /*15*/{21,-19,22,-19,23,-19,24,-19,25,-19,26,-19,27,-19,28,-19,29,-19,30,-19,31,-19,39,-19,-1,0},
    /*16*/{21,-16,22,-16,23,-16,24,-16,25,-16,26,-16,27,-16,28,-16,29,-16,30,-16,31,-16,39,-16,-1,0},
    /*17*/{21,-17,22,-17,23,-17,24,-17,25,-17,26,-17,27,-17,28,-17,29,-17,30,-17,31,-17,39,-17,-1,0},
    /*18*/{21,13,22,23,23,12,24,20,25,15,26,17,27,10,28,18,29,16,30,14,31,11,39,-10,-1,0},
    /*19*/{21,-22,22,-22,23,-22,24,-22,25,-22,26,-22,27,-22,28,-22,29,-22,30,-22,31,-22,39,-22,-1,0},
    /*20*/{21,-13,22,-13,23,-13,24,-13,25,-13,26,-13,27,-13,28,-13,29,-13,30,-13,31,-13,39,-13,-1,0},
    /*21*/{39,-9,-1,0},
    /*22*/{21,-18,22,-18,23,-18,24,-18,25,-18,26,-18,27,-18,28,-18,29,-18,30,-18,31,-18,39,-18,-1,0},
    /*23*/{21,-12,22,-12,23,-12,24,-12,25,-12,26,-12,27,-12,28,-12,29,-12,30,-12,31,-12,39,-12,-1,0},
    /*24*/{36,27,-1,0},
    /*25*/{19,-7,36,-7,-1,0},
    /*26*/{10,-6,-1,0},
    /*27*/{39,26,-1,0},
    /*28*/{36,30,-1,0},
    /*29*/{10,-5,-1,0},
    /*30*/{39,26,-1,0},
    /*31*/{0,-27,5,-27,8,-27,14,34,-1,0},
    /*32*/{0,-29,5,-29,8,-29,14,-29,-1,0},
    /*33*/{39,26,-1,0},
    /*34*/{0,-32,5,39,8,-32,-1,0},
    /*35*/{0,-26,5,-26,8,-26,14,34,-1,0},
    /*36*/{0,-28,5,-28,8,-28,14,-28,-1,0},
    /*37*/{0,-42,8,54,-1,0},
    /*38*/{21,-8,22,-8,23,-8,24,-8,25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,39,-8,-1,0},
    /*39*/{0,-34,5,-34,8,-34,-1,0},
    /*40*/{0,-31,5,39,8,-31,-1,0},
    /*41*/{0,-33,5,-33,8,-33,-1,0},
    /*42*/{39,44,-1,0},
    /*43*/{39,45,-1,0},
    /*44*/{35,46,36,-37,-1,0},
    /*45*/{38,51,41,50,42,49,-1,0},
    /*46*/{36,48,-1,0},
    /*47*/{0,-35,5,-35,8,-35,-1,0},
    /*48*/{36,-39,-1,0},
    /*49*/{36,-38,-1,0},
    /*50*/{36,-40,-1,0},
    /*51*/{36,-36,-1,0},
    /*52*/{1,-51,2,-51,4,63,6,-51,7,-51,9,-51,12,-51,13,-51,32,-51,33,-51,36,-51,39,-51,40,-51,-1,0},
    /*53*/{21,-8,22,-8,23,-8,24,-8,25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,39,-8,-1,0},
    /*54*/{0,-1,-1,0},
    /*55*/{0,-44,8,-44,-1,0},
    /*56*/{0,-41,8,54,-1,0},
    /*57*/{0,-43,8,-43,-1,0},
    /*58*/{39,60,-1,0},
    /*59*/{36,61,-1,0},
    /*60*/{1,-47,2,-47,4,-47,6,-47,7,-47,9,-47,12,-47,13,-47,32,-47,33,-47,36,-47,39,-47,40,-47,-1,0},
    /*61*/{0,-46,8,-46,-1,0},
    /*62*/{20,154,-1,0},
    /*63*/{1,84,2,71,6,82,7,77,9,73,12,79,13,72,32,69,33,76,36,-57,39,83,40,78,-1,0},
    /*64*/{1,-50,2,-50,4,-50,6,-50,7,-50,9,-50,12,-50,13,-50,32,-50,33,-50,36,-50,39,-50,40,-50,-1,0},
    /*65*/{1,-51,2,-51,4,63,6,-51,7,-51,9,-51,12,-51,13,-51,32,-51,33,-51,36,-51,39,-51,40,-51,-1,0},
    /*66*/{0,-45,8,-45,-1,0},
    /*67*/{1,-49,2,-49,4,-49,6,-49,7,-49,9,-49,12,-49,13,-49,32,-49,33,-49,36,-49,39,-49,40,-49,-1,0},
    /*68*/{36,142,-1,0},
    /*69*/{36,-75,-1,0},
    /*70*/{39,26,-1,0},
    /*71*/{41,123,-1,0},
    /*72*/{39,118,-1,0},
    /*73*/{36,-53,-1,0},
    /*74*/{36,-54,-1,0},
    /*75*/{41,102,-1,0},
    /*76*/{41,100,-1,0},
    /*77*/{36,-77,38,95,39,96,41,94,42,93,-1,0},
    /*78*/{39,26,-1,0},
    /*79*/{36,90,-1,0},
    /*80*/{36,-76,-1,0},
    /*81*/{39,88,-1,0},
    /*82*/{37,86,-1,0},
    /*83*/{36,-55,-1,0},
    /*84*/{36,-56,-1,0},
    /*85*/{36,-58,-1,0},
    /*86*/{36,-60,-1,0},
    /*87*/{41,89,-1,0},
    /*88*/{36,-67,-1,0},
    /*89*/{1,-52,2,-52,4,-52,6,-52,7,-52,9,-52,12,-52,13,-52,32,-52,33,-52,36,-52,39,-52,40,-52,-1,0},
    /*90*/{36,-62,-1,0},
    /*91*/{36,-69,-1,0},
    /*92*/{36,-80,-1,0},
    /*93*/{36,-79,41,99,-1,0},
    /*94*/{36,-84,-1,0},
    /*95*/{36,-81,39,98,41,97,-1,0},
    /*96*/{36,-82,-1,0},
    /*97*/{36,-83,-1,0},
    /*98*/{36,-78,-1,0},
    /*99*/{36,-68,-1,0},
    /*100*/{36,-61,-1,0},
    /*101*/{36,115,41,114,-1,0},
    /*102*/{39,107,-1,0},
    /*103*/{36,-86,-1,0},
    /*104*/{34,111,39,107,-1,0},
    /*105*/{34,-97,39,-97,-1,0},
    /*106*/{36,108,-1,0},
    /*107*/{34,-98,39,-98,-1,0},
    /*108*/{36,-93,-1,0},
    /*109*/{34,-96,39,-96,-1,0},
    /*110*/{37,112,-1,0},
    /*111*/{39,113,-1,0},
    /*112*/{36,-99,-1,0},
    /*113*/{36,116,-1,0},
    /*114*/{39,-94,-1,0},
    /*115*/{39,-95,-1,0},
    /*116*/{36,-64,-1,0},
    /*117*/{38,121,39,122,41,120,42,119,-1,0},
    /*118*/{36,-73,-1,0},
    /*119*/{36,-71,-1,0},
    /*120*/{36,-74,-1,0},
    /*121*/{36,-72,-1,0},
    /*122*/{18,125,-1,0},
    /*123*/{36,-59,-1,0},
    /*124*/{39,126,-1,0},
    /*125*/{39,127,-1,0},
    /*126*/{19,128,36,-66,-1,0},
    /*127*/{39,129,-1,0},
    /*128*/{16,130,-1,0},
    /*129*/{39,131,-1,0},
    /*130*/{36,-65,-1,0},
    /*131*/{19,134,-1,0},
    /*132*/{36,-63,-1,0},
    /*133*/{39,135,-1,0},
    /*134*/{16,136,-1,0},
    /*135*/{39,137,-1,0},
    /*136*/{17,138,-1,0},
    /*137*/{39,139,-1,0},
    /*138*/{36,-70,-1,0},
    /*139*/{36,-85,-1,0},
    /*140*/{41,145,-1,0},
    /*141*/{41,-88,-1,0},
    /*142*/{34,151,41,145,-1,0},
    /*143*/{34,-90,41,-90,-1,0},
    /*144*/{37,146,-1,0},
    /*145*/{39,147,-1,0},
    /*146*/{36,148,-1,0},
    /*147*/{34,-91,41,-91,-1,0},
    /*148*/{34,-89,41,-89,-1,0},
    /*149*/{36,-87,-1,0},
    /*150*/{37,152,-1,0},
    /*151*/{39,153,-1,0},
    /*152*/{36,-92,-1,0},
    /*153*/{36,155,-1,0},
    /*154*/{0,-48,8,-48,-1,0},
    /*155*/{36,157,-1,0},
    /*156*/{0,-30,5,-30,8,-30,14,-30,-1,0},
    /*157*/{36,159,-1,0},
    /*158*/{0,-25,5,-25,8,-25,14,-25,-1,0},
    /*159*/{36,161,-1,0},
    /*160*/{3,-3,15,-3,-1,0},
    /*161*/{0,-2,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{20,1,33,3,-1,-1},
    /*1*/{-1,-1},
    /*2*/{-1,-1},
    /*3*/{8,4,-1,-1},
    /*4*/{37,31,-1,-1},
    /*5*/{46,27,47,8,-1,-1},
    /*6*/{46,7,47,8,-1,-1},
    /*7*/{1,24,-1,-1},
    /*8*/{4,20,5,18,6,21,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{4,23,-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{1,28,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{1,157,-1,-1},
    /*31*/{17,34,18,35,19,32,-1,-1},
    /*32*/{-1,-1},
    /*33*/{1,155,-1,-1},
    /*34*/{13,40,14,39,15,37,-1,-1},
    /*35*/{19,36,-1,-1},
    /*36*/{-1,-1},
    /*37*/{10,52,28,56,29,55,30,54,-1,-1},
    /*38*/{46,42,47,8,-1,-1},
    /*39*/{-1,-1},
    /*40*/{14,41,-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{2,46,-1,-1},
    /*45*/{3,51,-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{12,61,34,64,35,65,48,63,-1,-1},
    /*53*/{46,58,47,8,-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{10,52,29,57,-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{9,80,11,74,16,73,21,84,32,69,36,79,-1,-1},
    /*64*/{-1,-1},
    /*65*/{12,66,34,67,48,63,-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{23,139,24,140,-1,-1},
    /*69*/{-1,-1},
    /*70*/{1,131,7,132,-1,-1},
    /*71*/{45,123,-1,-1},
    /*72*/{31,116,-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{38,103,39,102,-1,-1},
    /*76*/{40,100,-1,-1},
    /*77*/{-1,-1},
    /*78*/{1,91,44,90,-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{22,86,-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{42,105,43,104,-1,-1},
    /*103*/{-1,-1},
    /*104*/{41,108,42,109,-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{26,143,27,142,-1,-1},
    /*141*/{-1,-1},
    /*142*/{25,149,26,148,-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	action_obj.scanner = scanner;
	action_obj.classFile = classFile;

    }

  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }



	// parser code

	public Scanner scanner;
	public ClassFile classFile;
	
	public void report_error(String message, Object info)  {
    	classFile.report_error("Warning - " + message);
	}

	public void report_fatal_error(String message, Object info)  {
    	classFile.report_error("Error - " + message);
    	// System.exit(-1);
	}

	parser(ClassFile classFile, Scanner scanner) {
		super();

		this.scanner = scanner;
	    this.classFile = classFile;
	}

};

/** JavaCup generated class to encapsulate user supplied action code.*/
class CUP$actions {


    short access_val;
	public ClassFile classFile;
    public Scanner scanner;


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // table_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*table_default*/41);
              
            classFile.endTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // table_entry ::= Word SEP 
            {
              CUP$result = new symbol(/*table_entry*/42);
              
            classFile.addTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // table_list ::= table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // table_list ::= table_list table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // table_args ::= Int Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*high*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // table_args ::= Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // table ::= table_args table_list table_default 
            {
              CUP$result = new symbol(/*table*/38);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lookup_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*lookup_default*/25);
               classFile.endLookupswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lookup_entry ::= Int COLON Word SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/26);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lookup_list ::= lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lookup_list ::= lookup_list lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lookup_args ::= SEP 
            {
              CUP$result = new symbol(/*lookup_args*/24);
               classFile.newLookupswitch(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lookup ::= lookup_args lookup_list lookup_default 
            {
              CUP$result = new symbol(/*lookup*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // complex_instruction ::= TABLESWITCH table 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // complex_instruction ::= LOOKUPSWITCH lookup 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_instruction ::= Insn Str 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plantString((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_instruction ::= Insn Word Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_instruction ::= Insn Word Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_instruction ::= Insn Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_instruction ::= Insn Num 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_instruction ::= Insn Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_instruction ::= Insn Int Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_instruction ::= Insn 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruction ::= complex_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruction ::= simple_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // set_expr ::= Word Str 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_expr ::= Word Num 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(num_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // set_expr ::= Word Word 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // set_expr ::= Word Int 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(int_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // catch_expr ::= classname FROM Word TO Word USING Word 
            {
              CUP$result = new symbol(/*catch_expr*/7);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                            (/*fromlab*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*tolab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                            (/*branchlab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // throws_expr ::= classname 
            {
              CUP$result = new symbol(/*throws_expr*/44);
              
            classFile.addThrow((/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // line_expr ::= Int 
            {
              CUP$result = new symbol(/*line_expr*/40);
               classFile.addLine((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // limit_expr ::= Word Int 
            {
              CUP$result = new symbol(/*limit_expr*/22);
              
        // .limit locals
        if ((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("locals")
                 || (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("vars")) // "vars" for historic reasons
            classFile.setVarSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        // .limit stack
        else if ((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("stack"))
            classFile.setStackSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        else
            classFile.report_error(".limit expected \"stack\" or \"locals\", but got "
                          + (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_expr ::= Int IS Word Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_expr ::= Int IS Word Word FROM Word TO Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // directive ::= DSET set_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // directive ::= DCATCH catch_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // directive ::= DTHROWS throws_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // directive ::= DLINE line_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // directive ::= DLIMIT limit_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // directive ::= DVAR var_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // label ::= Word COLON 
            {
              CUP$result = new symbol(/*label*/21);
              
            classFile.plantLabel((/*label*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmnt ::= 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmnt ::= label 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmnt ::= error 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmnt ::= directive 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmnt ::= instruction 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= NT$1 stmnt SEP 
            {
              CUP$result = new symbol(/*statement*/34);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$1 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$1*/48);
               classFile.setLine(scanner.token_line_num); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statements ::= statements statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // endmethod ::= DEND METHOD SEP 
            {
              CUP$result = new symbol(/*endmethod*/12);
              
            classFile.endMethod();
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // defmethod ::= DMETHOD access Word SEP 
            {
              CUP$result = new symbol(/*defmethod*/10);
              
            String split[] = ScannerUtils.splitMethodSignature((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            classFile.newMethod(split[0], split[1], (/*i*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_spec ::= defmethod endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_spec ::= defmethod statements endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_list ::= method_spec 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_list ::= method_list method_spec 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // methods ::= 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // methods ::= method_list 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // item ::= Str 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // item ::= Num 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // item ::= Int 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = new Integer((/*i*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // optional_default ::= 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optional_default ::= EQ item 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_spec ::= DFIELD access Word Word optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/14);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                            (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_list ::= field_spec 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // field_list ::= field_list field_spec 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fields ::= 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fields ::= field_list 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implements_spec ::= DIMPLEMENTS classname SEP 
            {
              CUP$result = new symbol(/*implements_spec*/19);
               classFile.addInterface((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implements_list ::= implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implements_list ::= implements_list implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // implements ::= 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // implements ::= implements_list 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // super_spec ::= DSUPER classname SEP 
            {
              CUP$result = new symbol(/*super_spec*/37);
              
            classFile.setSuperClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_item ::= ABSTRACT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_ABSTRACT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_item ::= INTERFACE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_INTERFACE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_item ::= NATIVE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_NATIVE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_item ::= TRANSIENT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_TRANSIENT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access_item ::= VOLATILE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_VOLATILE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // access_item ::= SYNCHRONIZED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_SYNCHRONIZED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // access_item ::= FINAL 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_FINAL; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // access_item ::= STATIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_STATIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // access_item ::= PROTECTED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PROTECTED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // access_item ::= PRIVATE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PRIVATE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // access_item ::= PUBLIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PUBLIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // access_items ::= access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // access_items ::= access_items access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // access_list ::= 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // access_list ::= access_items 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // access ::= NT$0 access_list 
            {
              CUP$result = new int_token(/*access*/46);
               ((int_token)CUP$result).int_val = access_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/47);
               access_val = 0; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classname ::= Word 
            {
              CUP$result = new str_token(/*classname*/1);
               ((str_token)CUP$result).str_val = ScannerUtils.convertDots((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_spec ::= DINTERFACE access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val |
                        RuntimeConstants.ACC_SUPER |
                        RuntimeConstants.ACC_INTERFACE));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_spec ::= DCLASS access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val | RuntimeConstants.ACC_SUPER));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // source_spec ::= 
            {
              CUP$result = new symbol(/*source_spec*/33);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source_spec ::= DSOURCE Word SEP 
            {
              CUP$result = new symbol(/*source_spec*/33);
               classFile.setSource((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= jas_file EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // jas_file ::= source_spec class_spec super_spec implements fields methods 
            {
              CUP$result = new symbol(/*jas_file*/20);
              
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

